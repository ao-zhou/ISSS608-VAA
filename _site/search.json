[
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Take-home_Ex03",
    "section": "",
    "text": "pacman::p_load(jsonlite, tidygraph, ggraph, visNetwork, graphlayouts, ggforce, tidytext, tidyverse)\n\n\nmc3_data <- fromJSON(\"data/MC3.json\")\n\n\nmc3_edges <- as_tibble(mc3_data$links) %>%\n  distinct() %>%\n  mutate(source = as.character(source),\n         target = as.character(target),\n         type = as.character(type)) %>%\n  group_by(source, target, type) %>%\n  summarise(weights = n()) %>%\n  filter(source != target) %>%\n  ungroup()\n\n\nmc3_nodes <- as_tibble(mc3_data$nodes) %>%\n  mutate(country = as.character(country),\n         id = as.character(id),\n         product_services = as.numeric(as.character(revenue_omu)),\n         type = as.character(type)) %>%\n  select(id, country, type, revenue_omu, product_services)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "City of Engagement, with a total population of 50,000, is a small city located at Country of Nowhere. The city serves as a service centre of an agriculture region surrounding the city. The main agriculture of the region is fruit farms and vineyards. The local council of the city is in the process of preparing the Local Plan 2023. A sample survey of 1,000 representative residents had been conducted to collect data related to their household demographic and spending patterns, among other things. The city aims to use the data to assist with their major community revitalization efforts, including how to allocate a very large city renewal grant they have recently received."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#load-r-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#load-r-packages",
    "title": "Take-home Exercise 1",
    "section": "2.1 Load R packages",
    "text": "2.1 Load R packages\nThe code chunk below uses pacman::p_load() to check if packages are installed. If they are, they will be launched into R. The packages installed are:\n\ntidyverse: A collection of core packages designed for data science, used extensively for data preparation and wrangling.\nggstatsplot: for creating graphics with details from statistical tests.\nggiraph: for making ‘ggplot’ graphics interactive\nplotly: for plotting interactive statistical graphs.\ndplyr: for data wrangling and transformation.\nknitr: for dynamic report generation.\nggridges: for plotting ridgeline plots\nggdist: for visualising distribution and uncertainty\n\nAll packages can be found within CRAN.\n\n#Load packages\npacman::p_load(tidyverse, ggstatsplot, ggiraph, plotly, dplyr, knitr, ggridges, ggdist, ggthemes)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#import-the-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#import-the-data",
    "title": "Take-home Exercise 1",
    "section": "2.2 Import the data",
    "text": "2.2 Import the data\nImporting the data from csv using read_csv() from Participants and FinancialJounal csv files.\n\n#Import Data\nparticipants <- read_csv(\"data/Participants.csv\")\nfinancial_journal <-read_csv(\"data/FinancialJournal.csv\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-wrangling",
    "title": "Take-home Exercise 1",
    "section": "2.3 Data wrangling",
    "text": "2.3 Data wrangling\n\n2.3.1 Check data types\nFirst, check if all data imported are showing the correct types.\n\nparticipants\n\n# A tibble: 1,011 × 7\n   participantId householdSize haveKids   age educationLevel      interestGroup\n           <dbl>         <dbl> <lgl>    <dbl> <chr>               <chr>        \n 1             0             3 TRUE        36 HighSchoolOrCollege H            \n 2             1             3 TRUE        25 HighSchoolOrCollege B            \n 3             2             3 TRUE        35 HighSchoolOrCollege A            \n 4             3             3 TRUE        21 HighSchoolOrCollege I            \n 5             4             3 TRUE        43 Bachelors           H            \n 6             5             3 TRUE        32 HighSchoolOrCollege D            \n 7             6             3 TRUE        26 HighSchoolOrCollege I            \n 8             7             3 TRUE        27 Bachelors           A            \n 9             8             3 TRUE        20 Bachelors           G            \n10             9             3 TRUE        35 Bachelors           D            \n# ℹ 1,001 more rows\n# ℹ 1 more variable: joviality <dbl>\n\n\nFor participants table, we noticed below:\n\nparticipantId is in <dbl> format and needs to be converted to <factor>.\nhouseholdSize and age are in <dbl> format and need to be converted to <int>.\neducationLevel and interestGroup need to be converted into <factor> from <chr>.\n\nThe code chunk below uses mutate_at() from dplyr package to convert data type.\n\n# convert participantId, educationLevel and interestGroup to factor\ncol1 <- c(\"participantId\", \"educationLevel\", \"interestGroup\")\nparticipants %>% mutate_at(col1, as.factor) \n\n# convert householdSize and ago to integer\ncol2 <- c(\"householdSize\", \"age\")\nparticipants %>% mutate_at(col2, as.integer) \n\nThen we will check the same for financial_journal.\n\nfinancial_journal\n\n# A tibble: 1,513,636 × 4\n   participantId timestamp           category  amount\n           <dbl> <dttm>              <chr>      <dbl>\n 1             0 2022-03-01 00:00:00 Wage      2473. \n 2             0 2022-03-01 00:00:00 Shelter   -555. \n 3             0 2022-03-01 00:00:00 Education  -38.0\n 4             1 2022-03-01 00:00:00 Wage      2047. \n 5             1 2022-03-01 00:00:00 Shelter   -555. \n 6             1 2022-03-01 00:00:00 Education  -38.0\n 7             2 2022-03-01 00:00:00 Wage      2437. \n 8             2 2022-03-01 00:00:00 Shelter   -557. \n 9             2 2022-03-01 00:00:00 Education  -12.8\n10             3 2022-03-01 00:00:00 Wage      2367. \n# ℹ 1,513,626 more rows\n\n\nFor financial_journal table, we noticed below:\n\nparticipantId is in <dbl> format and needs to be converted to <factor>.\ncategory needs to be converted into <factor> from <chr>.\n\nSimilar to above, the code chunk below uses mutate_at() from dplyr package to convert data type.\n\n# convert participantId and category into factor\ncol3 <- c( \"participantId\", \"category\")\nfinancial_journal %>% mutate_at(col3, as.factor) \n\n\n\n2.3.2 Check missing values\nis.na() function is used to confirm that there are no missing values in the datasets.\n\nany(is.na(participants))\n\n[1] FALSE\n\n\n\nany(is.na(financial_journal))\n\n[1] FALSE\n\n\n\n\n2.3.3 Data cleaning\nCheck data summary for participants using unique() for categorical and discrete numeric data.\n\nunique(participants$householdSize)\n\n[1] 3 2 1\n\n\n\nunique(participants$haveKids)\n\n[1]  TRUE FALSE\n\n\n\nsort(unique(participants$age))\n\n [1] 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42\n[26] 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60\n\n\n\nunique(participants$educationLevel)\n\n[1] \"HighSchoolOrCollege\" \"Bachelors\"           \"Graduate\"           \n[4] \"Low\"                \n\n\n\nsort(unique(participants$interestGroup))\n\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\n\nCheck the same financial_journal.\n\nunique(financial_journal$category)\n\n[1] \"Wage\"           \"Shelter\"        \"Education\"      \"RentAdjustment\"\n[5] \"Food\"           \"Recreation\"    \n\n\n\n\n2.3.4 Prepare the data for visualisation\nGroup the financial_journals by participantId and category.\n\nfin_agg <- financial_journal %>% group_by(participantId, category) %>% summarise(amount = sum(amount))\n\nUse left_join() from dplyr package to join two tables.\n\ncombined <- left_join(fin_agg, participants, by = c(\"participantId\" = \"participantId\"))\n\nThe final dataset combined is displayed below using knitr::kable() function.\n\nkable(head(combined), \"simple\")\n\n\n\n\nparticipantId c\nategory\namount\nhouseholdSize h\naveKids\nage e\nducationLevel i\nnterestGroup\njoviality\n\n\n\n\n0\nEducation\n-494.0699\n3\nTRUE\n36\nHighSchoolOrCollege\nH\n0.0016267\n\n\n0\nFood\n-3141.9762\n3\nTRUE\n36\nHighSchoolOrCollege\nH\n0.0016267\n\n\n0\nRecreation\n-4384.0672\n3\nTRUE\n36\nHighSchoolOrCollege\nH\n0.0016267\n\n\n0\nShelter\n-7214.8521\n3\nTRUE\n36\nHighSchoolOrCollege\nH\n0.0016267\n\n\n0\nWage\n109816.5883\n3\nTRUE\n36\nHighSchoolOrCollege\nH\n0.0016267\n\n\n1\nEducation\n-494.0699\n3\nTRUE\n25\nHighSchoolOrCollege\nB\n0.3280865"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#education-level",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#education-level",
    "title": "Take-home Exercise 1",
    "section": "3.1 Education level",
    "text": "3.1 Education level\n\n3.1.1 Education level distribution\nCheck the distribution of education level. People graduated from high school and college represent more than half of the sample.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\nggplot(participants, aes(x = fct_rev(fct_infreq(educationLevel)))) +\n  geom_bar(width = 0.5) +\n  coord_flip() +\n  labs(x = \"Education Level\")  + \n  ggtitle(\"Count by Education Level\")\n\n\n\n\n\n\n3.1.2 Wage distribution by education level\nWith no surprise, people with higher education has higher median wage. Interestingly, wage distribution for people with low and high school or college education has two modes.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\nggplot(subset(combined, category == \"Wage\"),\n       aes(x = amount,\n           y = educationLevel,\n           fill = factor(stat(quantile))\n           )) + \n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE,\n    quantiles = 4,\n    quantile_lines = TRUE\n  ) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges() +\n  labs(x = \"Wage\", y = \"Education level\")  +\n  ggtitle(\"Wage distribution by Education Level\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#spend",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#spend",
    "title": "Take-home Exercise 1",
    "section": "3.2 Spend",
    "text": "3.2 Spend\nCreate a table containing only spend for visualisation in this section.\n\nspend <- subset(combined, category != \"Wage\" & category != \"RentAdjustment\")\n\n\n3.2.1 Spend by category\nShelter takes up a big portion for spend according to the sample.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\nggplot(spend,\n       aes(x = category, \n           y = - amount, \n           fill = category)) +\n  geom_violin(width = 2, alpha = 0.5) +\n  geom_boxplot_interactive(width = 0.2, alpha = 0.5) +\n  theme(legend.position = \"none\") +\n  labs(y = \"Spend\")  +\n  ggtitle(\"Spend by Category\")\n\n\n\n\n\n\n3.2.2 Spend difference between people with and without kids\nCreate a table aggregating spend by participant.\n\nspend_agg <- spend %>% group_by(participantId, haveKids) %>% summarise(amount = - sum(amount))\n\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of spend amount by having kids or not. We can see that with 95% confidence, people having kids spend more than people having no kids.\n\n\nShow the code\nggbetweenstats(\n  data = spend_agg,\n  x = haveKids, \n  y = amount,\n  title = \"Two-sample mean test for spend by having kids\",\n  type = \"np\",\n  messages = FALSE\n)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#net-income-and-wage",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#net-income-and-wage",
    "title": "Take-home Exercise 1",
    "section": "3.3 Net income and wage",
    "text": "3.3 Net income and wage\nAggregate the financial transactions for net and wage at participant level and then join with participants.\n\n\nShow the code\n# create a table with participants net income/loss\nnet <- financial_journal %>% group_by(participantId) %>% summarise(net_income = sum(amount))\n\n# create a table with participants wage\nwage <- subset(financial_journal, category == \"Wage\") %>% group_by(participantId) %>% summarise(wage = sum(amount))\n\n# join the net income/loss, wage table with participants\nnet_combined <- left_join(net, wage, by = c(\"participantId\" = \"participantId\"))\nnet_combined <- left_join(net_combined, participants, by = c(\"participantId\" = \"participantId\"))\n\n\nCheck the correlation between wage and net income. People who are single have more net income compared to people who are married with same amount of wage.\n\n\nShow the code\n#Initiating the base plot\nplot_ly(data = net_combined,\n        x = ~wage,\n        y = ~net_income,\n        type = 'scatter',\n        mode = 'markers',\n        sizes = c(5, 15),\n        color = ~factor(householdSize),\n        marker = list(opacity = 0.6,\n                      sizemode = 'diameter',\n                      line = list(width = 0.2, color = '#FFFFFF')),\n        \n#Creating tooltip details\n        hovertemplate = ~paste(\"<br>Participant Id\", participantId,\n                               \"<br>Household Size:\", householdSize,\n                               \"<br>Have Kids:\", haveKids,\n                               \"<br>Age:\", age,\n                               \"<br>Education Level:\", educationLevel,\n                               \"<br>Interest Group:\", interestGroup)) |>\n\n  \n#Configuring the plot and axis title and range  \n  layout(title = \"Correlation between wage and net income\",\n         xaxis = list(title = \"Wage \"\n                      ),\n         yaxis = list(title = \"Net income\"\n                      ))\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nHoover over to see the details of the dot."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "lubridate is part of tidyverse now, so there is no need to import lubridate separately.\n\n\nShow the code\npacman::p_load(igraph, tidyverse, tidygraph, ggraph, visNetwork, clock, graphlayouts)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#import-nodes-and-edges-data",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#import-nodes-and-edges-data",
    "title": "In-class Exercise 5",
    "section": "2.1 Import nodes and edges data",
    "text": "2.1 Import nodes and edges data\n\n\nShow the code\nGAStech_nodes <- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges <- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\n\n\n\n\n\n\n\nTip\n\n\n\nFor the edges data frame, the first column should always be source and second column be target.\n\n\n\n\n\n\n\n\nThis is import.\n\n\n\nFor missing values, use “unknown” or “no value” instead of build-in missing value function to avoid losing the data entry."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#review-the-imported-data",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#review-the-imported-data",
    "title": "In-class Exercise 5",
    "section": "2.2 Review the imported data",
    "text": "2.2 Review the imported data\nUse glimpse() of dplyr to examine the structure of the data frame.\n\n\nShow the code\nglimpse(GAStech_edges)\n\n\nRows: 9,063\nColumns: 8\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\nNotice that the SentDate is categorized as “Character” instead of “Date” data type, and we need to change it back to “Date”data type before further analysis."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#data-wrangling",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#data-wrangling",
    "title": "In-class Exercise 5",
    "section": "2.3 Data wrangling",
    "text": "2.3 Data wrangling\n\n2.3.1 Wrangling Time\nThe code chunk below will change the data type of SentDate to “Date”.\n\n\nShow the code\nGAStech_edges <- GAStech_edges %>%\n  mutate(SendDate = dmy(SentDate)) %>%\n  mutate(Weekday = wday(SentDate, label = TRUE, abbr = FALSE))\n\n\nReview the data again after the change.\n\n\nShow the code\nglimpse(GAStech_edges)\n\n\nRows: 9,063\nColumns: 10\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    <date> 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     <ord> Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…\n\n\n\n\n2.3.2 Wrangling attributes\nWith a close examination, GAStech_edges data.frame is at email records level, which is not very useful for visualization. Therefore, we will aggregate individual by date, senders, receivers, main subject and day of the week.\n\n\nShow the code\nGAStech_edges_aggregated <- GAStech_edges %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(source, target, Weekday) %>%\n    summarise(Weight = n()) %>%\n  filter(source != target) %>%\n  filter(Weight > 1) %>%\n  ungroup()\n\n\n\n\n\n\n\n\nTip\n\n\n\nAlways check dplyr to use the latest way to wrangle data. Google result may show old ways to solve a problem\n\n\n\n\n\n\n\n\nNote\n\n\n\nungroup() at the end of the code chunk is for future calculation. If it’s not done, when we do calculation later it will be based on the grouped data.\n\n\nReview the data again after the change.\n\n\nShow the code\nglimpse(GAStech_edges_aggregated)\n\n\nRows: 1,372\nColumns: 4\n$ source  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  <dbl> 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday <ord> Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  <int> 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#this-is-import.",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#this-is-import.",
    "title": "In-class Exercise 5",
    "section": "This is import.",
    "text": "This is import.\nFor missing values, use “unknown” or “no value” instead of build-in missing value function to avoid losing the data entry."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "The country of Oceanus has sought FishEye International’s help in identifying companies possibly engaged in illegal, unreported, and unregulated (IUU) fishing. As part of the collaboration, FishEye’s analysts received import/export data for Oceanus’ marine and fishing industries. However, Oceanus has informed FishEye that the data is incomplete. To facilitate their analysis, FishEye transformed the trade data into a knowledge graph. Using this knowledge graph, they hope to understand business relationships, including finding links that will help them stop IUU fishing and protect marine species that are affected by it. FishEye analysts found that node-link diagrams gave them a good high-level overview of the knowledge graph. However, they are now looking for visualizations that provide more detail about patterns for entities in the knowledge graph.\n\n\nEvaluate the sets of predicted knowledge graph links FishEye has provided using visual analytics. Which sets are most reliable for completing the graph?\n\n\n\nReference from Mini-Challenge 2 of VAST Challenge 2023."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#getting-started",
    "title": "Take-home Exercise 2",
    "section": "2.1 Getting Started",
    "text": "2.1 Getting Started\nInstall R packages needed for data preparation, data wrangling, data analysis and visualisation using the code chunk below.\n\npacman::p_load(jsonlite, tidyverse, tidygraph, ggraph, visNetwork, igraph)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-import",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-import",
    "title": "Take-home Exercise 2",
    "section": "2.2 Data Import",
    "text": "2.2 Data Import\nThe code chunk below imports data using fromJSON() from jsonlite package into R environment.\n\nmc2_data <- fromJSON(\"data/mc2_challenge_graph.json\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-wrangling",
    "title": "Take-home Exercise 2",
    "section": "2.3 Data Wrangling",
    "text": "2.3 Data Wrangling\n\n2.3.1 The edges data\n\nExtracting edges data\nExtract edges data table from mc2_data list object and save the output in a tibble data frame object called mc2_edges using the code chunk below.\n\nmc2_edges <- as_tibble(mc2_data$links) %>%\n  mutate(ArrivalDate = ymd(arrivaldate)) %>%\n  mutate(Year = year(ArrivalDate)) %>% \n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu, volumeteu, weightkg, valueofgoodsusd) %>%\ndistinct()\n\n\n\n\n\n\n\nNote\n\n\n\n\nymd() of lubridate package (embedded in tidyverse now) is used to covert arrivaldate field from character data type into date data type.\nyear() of lubridate package (embedded in tidyverse now) is used to convert the values in ArrivalDate field into year values.\n\n\n\n\n\nPreparing edges data\nPrepare an aggregated edges table by grouping source, target, hscode, Year and filtering hscode is equal to 306170 and Year is equal to 2034.\n\nmc2_edges_aggregated <- mc2_edges %>%\n  filter(hscode == \"306170\" & Year == \"2034\") %>%\n  group_by(source, target, hscode, Year) %>%\n    summarise(weights = n()) %>%\n  filter(source != target) %>%\n  filter(weights > 20) %>%\n  ungroup()\n\n\n\n\n\n\n\nNote\n\n\n\n\nsummarise() is used to count the aggregated records.\nfilter() is then used to perform two selection:\n\nto select all records whereby source are not equal to target, and\nto select all records whereby the values of their weights field are greater than 20\n\n\n\n\n\n\n\n2.3.2 The nodes data\n\nExtracting nodes data\nExtract nodes data table from mc2_data list object and save the output in a tibble data frame object called mc2_nodes using the code chunk below.\n\nmc2_nodes <- as_tibble(mc2_data$nodes) %>%\n  select(id, shpcountry, rcvcountry)\n\n\n\nPreparing nodes data\nTo ensure that all the nodes in the nodes data tables include all the source and target values, we will prepare a new nodes data table using the source and target fields of mc2_edges_aggregated data table.\n\nid1 <- mc2_edges_aggregated %>%\n  select(source) %>%\n  rename(id = source)\nid2 <- mc2_edges_aggregated %>%\n  select(target) %>%\n  rename(id = target)\nmc2_nodes_extracted <- rbind(id1, id2) %>%\n  distinct()\n\n\n\n\n2.3.3 Building the tidygraph data\nThe code chunk below is used to build the tidygraph data model.\n\nmc2_graph <- tbl_graph(nodes = mc2_nodes_extracted,\n                       edges = mc2_edges_aggregated,\n                       directed = TRUE)\n\n\nReview the output of tidygraph’s graph object\n\nThe output below reveals that mc2_graph is a tbl_graph object with 2358 nodes and 4685 edges.\n\n\n\nShow the code\nmc2_graph\n\n\n# A tbl_graph: 191 nodes and 291 edges\n#\n# A directed acyclic simple graph with 9 components\n#\n# A tibble: 191 × 1\n  id                                             \n  <chr>                                          \n1 1 Ltd. Liability Co Cargo                      \n2 Adriatic Catch Ltd. Liability Co Transportation\n3 Adriatic Tuna AS Solutions                     \n4 Aqua Adventures Carriers Seabed                \n5 Aqua Azul LC International                     \n6 Aqua Mermaid Sagl Merchants                    \n# ℹ 185 more rows\n#\n# A tibble: 291 × 5\n   from    to hscode  Year weights\n  <int> <int> <chr>  <dbl>   <int>\n1     1   108 306170  2034      24\n2     2   109 306170  2034      47\n3     2   110 306170  2034      23\n# ℹ 288 more rows\n\n\n\n\nVisualising the tidygraph data model\nUse function from ggraph package to plot a simple network graph to check if the tidygraph model has been prepared correctly.\n\nggraph(mc2_graph,\n       layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes()) +\n  theme_graph()\n\n\n\n\nExport data objects into rds format for future use.\n\nwrite_rds(mc2_nodes_extracted, \"data/mc2_nodes_extracted.rds\")\nwrite_rds(mc2_edges_aggregated, \"data/mc2_edges_aggregated.rds\")\nwrite_rds(mc2_graph, \"data/mc2_graph.rds\")\n\n\n\n\n2.3.4 Preparing network data for visNetwork\nPrepare two tibble data frames (one for nodes and one for edges), so that we can plot interactive network graph using visNetwork package.\n\nPreparing edges tibble data frame\nNote that tidygraph model is in R list format. The code chunk below will be used to extract and convert the edges into a tibble data frame.\n\nedges_df <- mc2_graph %>%\n  activate(edges) %>%\n  as_tibble()\n\n\n\nPreparing nodes tibble data frame\nUse the code chunk below to prepare a nodes tibble data frame.\n\nnodes_df <- mc2_graph %>%\n  activate(nodes) %>%\n  as_tibble() %>%\n  rename(label = id) %>%\n  mutate(id = row_number()) %>%\n  select(id, label)\n\n\n\n\n\n\n\nImportant\n\n\n\nvisNetwork is expecting a field called id in the tibble data frame. The field must be in numeric data type and it must be unique to the values in the from and to field of edges_df.\n\n\n\n\nPlotting a simple interactive network graph\nTo ensure that the tibble data frames are confirmed to the requirements of visNetwork, we will plot a simple interactive graph by using the code chunk below.\n\nrequire(devtools)\ninstall_version(\"knitr\", version = \"1.42\", repos = \"http://cran.us.r-project.org\")\n\n\n\n\n\n\n\nImportant\n\n\n\nEncountering error while rendering with knitr 1.43. Thus using devtools to install older version of knitr.\n\n\n\nvisNetwork(nodes_df,\n           edges_df) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#section",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#section",
    "title": "Take-home Exercise 2",
    "section": "3.1",
    "text": "3.1"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#explorary-data-analysis",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#explorary-data-analysis",
    "title": "Take-home Exercise 2",
    "section": "3.1 Explorary data analysis",
    "text": "3.1 Explorary data analysis"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#preparing-groups-data",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#preparing-groups-data",
    "title": "Take-home Exercise 2",
    "section": "2.4 Preparing groups data",
    "text": "2.4 Preparing groups data\nUse the same methodology from section 2.3 to prepare network data from groups identified by FishEye.\n\n\nShow the code\ncarp <- fromJSON(\"data/bundles/carp.json\")\n\ncarp_edges <- as_tibble(carp$links) %>%\n  mutate(ArrivalDate = ymd(arrivaldate)) %>%\n  mutate(Year = year(ArrivalDate)) %>%\n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu, \n         volumeteu, weightkg) %>% \n  distinct()\n\ncarp_edges_aggregated <- carp_edges %>%\n  group_by(source, target, hscode, Year) %>%\n    summarise(weights = n()) %>%\n  filter(source!=target) %>%\n  ungroup()\n\ncarp_nodes <- as_tibble(carp$nodes) %>%\n  select(id, shpcountry, rcvcountry)\n\ncarp_id1 <- carp_edges_aggregated %>%\n  select(source) %>%\n  rename(id = source)\ncarp_id2 <- carp_edges_aggregated %>%\n  select(target) %>%\n  rename(id = target)\ncarp_nodes_extracted <- rbind(carp_id1, carp_id2) %>%\n  distinct()\n\ncarp_graph <- tbl_graph(nodes = carp_nodes_extracted,\n                       edges = carp_edges_aggregated,\n                       directed = TRUE)\n\ncarp_edges_df <- carp_graph %>%\n  activate(edges) %>%\n  as_tibble()\n\n\ncarp_nodes_df <- carp_graph %>%\n  activate(nodes) %>%\n  as_tibble() %>%\n  rename(label = id) %>%\n  mutate(id=row_number()) %>%\n  select(id, label)\n\n\n\n\nShow the code\ncatfish <- fromJSON(\"data/bundles/catfish.json\")\n\ncatfish_edges <- as_tibble(catfish$links) %>%\n  mutate(ArrivalDate = ymd(arrivaldate)) %>%\n  mutate(Year = year(ArrivalDate)) %>%\n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu) %>% \n  distinct()\n\ncatfish_edges_aggregated <- catfish_edges %>%\n  group_by(source, target, hscode, Year) %>%\n    summarise(weights = n()) %>%\n  filter(source!=target) %>%\n  ungroup()\n\ncatfish_nodes <- as_tibble(catfish$nodes) %>%\n  select(id, shpcountry, rcvcountry)\n\ncatfish_id1 <- catfish_edges_aggregated %>%\n  select(source) %>%\n  rename(id = source)\ncatfish_id2 <- catfish_edges_aggregated %>%\n  select(target) %>%\n  rename(id = target)\ncatfish_nodes_extracted <- rbind(catfish_id1, catfish_id2) %>%\n  distinct()\n\ncatfish_graph <- tbl_graph(nodes = catfish_nodes_extracted,\n                       edges = catfish_edges_aggregated,\n                       directed = TRUE)\n\ncatfish_edges_df <- catfish_graph %>%\n  activate(edges) %>%\n  as_tibble()\n\n\ncatfish_nodes_df <- catfish_graph %>%\n  activate(nodes) %>%\n  as_tibble() %>%\n  rename(label = id) %>%\n  mutate(id=row_number()) %>%\n  select(id, label)\n\n\n\n\nShow the code\nchubMackerel <- fromJSON(\"data/bundles/chub_mackerel.json\")\n\nchubMackerel_edges <- as_tibble(chubMackerel$links) %>%\n  mutate(ArrivalDate = ymd(arrivaldate)) %>%\n  mutate(Year = year(ArrivalDate)) %>%\n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu) %>% \n  distinct()\n\nchubMackerel_edges_aggregated <- chubMackerel_edges %>%\n  group_by(source, target, hscode, Year) %>%\n    summarise(weights = n()) %>%\n  filter(source!=target) %>%\n  ungroup()\n\nchubMackerel_nodes <- as_tibble(chubMackerel$nodes) %>%\n  select(id, shpcountry, rcvcountry)\n\nchubMackerel_id1 <- chubMackerel_edges_aggregated %>%\n  select(source) %>%\n  rename(id = source)\nchubMackerel_id2 <- chubMackerel_edges_aggregated %>%\n  select(target) %>%\n  rename(id = target)\nchubMackerel_nodes_extracted <- rbind(chubMackerel_id1, chubMackerel_id2) %>%\n  distinct()\n\nchubMackerel_graph <- tbl_graph(nodes = chubMackerel_nodes_extracted,\n                       edges = chubMackerel_edges_aggregated,\n                       directed = TRUE)\n\nchubMackerel_edges_df <- chubMackerel_graph %>%\n  activate(edges) %>%\n  as_tibble()\n\n\nchubMackerel_nodes_df <- chubMackerel_graph %>%\n  activate(nodes) %>%\n  as_tibble() %>%\n  rename(label = id) %>%\n  mutate(id=row_number()) %>%\n  select(id, label)\n\n\n\n\nShow the code\ncod2 <- fromJSON(\"data/bundles/cod2.json\")\n\ncod2_edges <- as_tibble(cod2$links) %>%\n  mutate(ArrivalDate = ymd(arrivaldate)) %>%\n  mutate(Year = year(ArrivalDate)) %>%\n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu) %>% \n  distinct()\n\ncod2_edges_aggregated <- cod2_edges %>%\n  group_by(source, target, hscode, Year) %>%\n    summarise(weights = n()) %>%\n  filter(source!=target) %>%\n  ungroup()\n\ncod2_nodes <- as_tibble(cod2$nodes) %>%\n  select(id, shpcountry, rcvcountry)\n\ncod2_id1 <- cod2_edges_aggregated %>%\n  select(source) %>%\n  rename(id = source)\ncod2_id2 <- cod2_edges_aggregated %>%\n  select(target) %>%\n  rename(id = target)\ncod2_nodes_extracted <- rbind(cod2_id1, cod2_id2) %>%\n  distinct()\n\ncod2_graph <- tbl_graph(nodes = cod2_nodes_extracted,\n                       edges = cod2_edges_aggregated,\n                       directed = TRUE)\n\ncod2_edges_df <- cod2_graph %>%\n  activate(edges) %>%\n  as_tibble()\n\n\ncod2_nodes_df <- cod2_graph %>%\n  activate(nodes) %>%\n  as_tibble() %>%\n  rename(label = id) %>%\n  mutate(id=row_number()) %>%\n  select(id, label)\n\n\n\n\nShow the code\nherring <- fromJSON(\"data/bundles/herring.json\")\n\nherring_edges <- as_tibble(herring$links) %>%\n  mutate(ArrivalDate = ymd(arrivaldate)) %>%\n  mutate(Year = year(ArrivalDate)) %>%\n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu) %>% \n  distinct()\n\nherring_edges_aggregated <- herring_edges %>%\n  group_by(source, target, hscode, Year) %>%\n    summarise(weights = n()) %>%\n  filter(source!=target) %>%\n  ungroup()\n\nherring_nodes <- as_tibble(herring$nodes) %>%\n  select(id, shpcountry, rcvcountry)\n\nherring_id1 <- herring_edges_aggregated %>%\n  select(source) %>%\n  rename(id = source)\nherring_id2 <- herring_edges_aggregated %>%\n  select(target) %>%\n  rename(id = target)\nherring_nodes_extracted <- rbind(herring_id1, herring_id2) %>%\n  distinct()\n\nherring_graph <- tbl_graph(nodes = herring_nodes_extracted,\n                       edges = herring_edges_aggregated,\n                       directed = TRUE)\n\nherring_edges_df <- herring_graph %>%\n  activate(edges) %>%\n  as_tibble()\n\nherring_nodes_df <- herring_graph %>%\n  activate(nodes) %>%\n  as_tibble() %>%\n  rename(label = id) %>%\n  mutate(id=row_number()) %>%\n  select(id, label)\n\n\n\n\nShow the code\nlichen <- fromJSON(\"data/bundles/lichen.json\")\n\nlichen_edges <- as_tibble(lichen$links) %>%\n  mutate(ArrivalDate = ymd(arrivaldate)) %>%\n  mutate(Year = year(ArrivalDate)) %>%\n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu) %>% \n  distinct()\n\nlichen_edges_aggregated <- lichen_edges %>%\n  group_by(source, target, hscode, Year) %>%\n    summarise(weights = n()) %>%\n  filter(source!=target) %>%\n  ungroup()\n\nlichen_nodes <- as_tibble(lichen$nodes) %>%\n  select(id, shpcountry, rcvcountry)\n\nlichen_id1 <- lichen_edges_aggregated %>%\n  select(source) %>%\n  rename(id = source)\nlichen_id2 <- lichen_edges_aggregated %>%\n  select(target) %>%\n  rename(id = target)\nlichen_nodes_extracted <- rbind(lichen_id1, lichen_id2) %>%\n  distinct()\n\nlichen_graph <- tbl_graph(nodes = lichen_nodes_extracted,\n                       edges = lichen_edges_aggregated,\n                       directed = TRUE)\n\nlichen_edges_df <- lichen_graph %>%\n  activate(edges) %>%\n  as_tibble()\n\nlichen_nodes_df <- lichen_graph %>%\n  activate(nodes) %>%\n  as_tibble() %>%\n  rename(label = id) %>%\n  mutate(id=row_number()) %>%\n  select(id, label)\n\n\n\n\nShow the code\nmackerel <- fromJSON(\"data/bundles/mackerel.json\")\n\nmackerel_edges <- as_tibble(mackerel$links) %>%\n  mutate(ArrivalDate = ymd(arrivaldate)) %>%\n  mutate(Year = year(ArrivalDate)) %>%\n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu) %>% \n  distinct()\n\nmackerel_edges_aggregated <- mackerel_edges %>%\n  group_by(source, target, hscode, Year) %>%\n    summarise(weights = n()) %>%\n  filter(source!=target) %>%\n  ungroup()\n\nmackerel_nodes <- as_tibble(mackerel$nodes) %>%\n  select(id, shpcountry, rcvcountry)\n\nmackerel_id1 <- mackerel_edges_aggregated %>%\n  select(source) %>%\n  rename(id = source)\nmackerel_id2 <- mackerel_edges_aggregated %>%\n  select(target) %>%\n  rename(id = target)\nmackerel_nodes_extracted <- rbind(mackerel_id1, mackerel_id2) %>%\n  distinct()\n\nmackerel_graph <- tbl_graph(nodes = mackerel_nodes_extracted,\n                       edges = mackerel_edges_aggregated,\n                       directed = TRUE)\n\nmackerel_edges_df <- mackerel_graph %>%\n  activate(edges) %>%\n  as_tibble()\n\nmackerel_nodes_df <- mackerel_graph %>%\n  activate(nodes) %>%\n  as_tibble() %>%\n  rename(label = id) %>%\n  mutate(id=row_number()) %>%\n  select(id, label)\n\n\n\n\nShow the code\npollock <- fromJSON(\"data/bundles/pollock.json\")\n\npollock_edges <- as_tibble(pollock$links) %>%\n  mutate(ArrivalDate = ymd(arrivaldate)) %>%\n  mutate(Year = year(ArrivalDate)) %>%\n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu) %>% \n  distinct()\n\npollock_edges_aggregated <- pollock_edges %>%\n  group_by(source, target, hscode, Year) %>%\n    summarise(weights = n()) %>%\n  filter(source!=target) %>%\n  ungroup()\n\npollock_nodes <- as_tibble(pollock$nodes) %>%\n  select(id, shpcountry, rcvcountry)\n\npollock_id1 <- pollock_edges_aggregated %>%\n  select(source) %>%\n  rename(id = source)\npollock_id2 <- pollock_edges_aggregated %>%\n  select(target) %>%\n  rename(id = target)\npollock_nodes_extracted <- rbind(pollock_id1, pollock_id2) %>%\n  distinct()\n\npollock_graph <- tbl_graph(nodes = pollock_nodes_extracted,\n                       edges = pollock_edges_aggregated,\n                       directed = TRUE)\n\npollock_edges_df <- pollock_graph %>%\n  activate(edges) %>%\n  as_tibble()\n\npollock_nodes_df <- pollock_graph %>%\n  activate(nodes) %>%\n  as_tibble() %>%\n  rename(label = id) %>%\n  mutate(id=row_number()) %>%\n  select(id, label)\n\n\n\n\nShow the code\nsalmon_wgl <- fromJSON(\"data/bundles/salmon_wgl.json\")\n\nsalmon_wgl_edges <- as_tibble(salmon_wgl$links) %>%\n  mutate(ArrivalDate = ymd(arrivaldate)) %>%\n  mutate(Year = year(ArrivalDate)) %>%\n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu) %>% \n  distinct()\n\nsalmon_wgl_edges_aggregated <- salmon_wgl_edges %>%\n  group_by(source, target, hscode, Year) %>%\n    summarise(weights = n()) %>%\n  filter(source!=target) %>%\n  ungroup()\n\nsalmon_wgl_nodes <- as_tibble(salmon_wgl$nodes) %>%\n  select(id, shpcountry, rcvcountry)\n\nsalmon_wgl_id1 <- salmon_wgl_edges_aggregated %>%\n  select(source) %>%\n  rename(id = source)\nsalmon_wgl_id2 <- salmon_wgl_edges_aggregated %>%\n  select(target) %>%\n  rename(id = target)\nsalmon_wgl_nodes_extracted <- rbind(salmon_wgl_id1, salmon_wgl_id2) %>%\n  distinct()\n\nsalmon_wgl_graph <- tbl_graph(nodes = salmon_wgl_nodes_extracted,\n                       edges = salmon_wgl_edges_aggregated,\n                       directed = TRUE)\n\nsalmon_wgl_edges_df <- salmon_wgl_graph %>%\n  activate(edges) %>%\n  as_tibble()\n\nsalmon_wgl_nodes_df <- salmon_wgl_graph %>%\n  activate(nodes) %>%\n  as_tibble() %>%\n  rename(label = id) %>%\n  mutate(id=row_number()) %>%\n  select(id, label)\n\n\n\n\nShow the code\nsalmon <- fromJSON(\"data/bundles/salmon.json\")\n\nsalmon_edges <- as_tibble(salmon$links) %>%\n  mutate(ArrivalDate = ymd(arrivaldate)) %>%\n  mutate(Year = year(ArrivalDate)) %>%\n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu) %>% \n  distinct()\n\nsalmon_edges_aggregated <- salmon_edges %>%\n  group_by(source, target, hscode, Year) %>%\n    summarise(weights = n()) %>%\n  filter(source!=target) %>%\n  ungroup()\n\nsalmon_nodes <- as_tibble(salmon$nodes) %>%\n  select(id, shpcountry, rcvcountry)\n\nsalmon_id1 <- salmon_edges_aggregated %>%\n  select(source) %>%\n  rename(id = source)\nsalmon_id2 <- salmon_edges_aggregated %>%\n  select(target) %>%\n  rename(id = target)\nsalmon_nodes_extracted <- rbind(salmon_id1, salmon_id2) %>%\n  distinct()\n\nsalmon_graph <- tbl_graph(nodes = salmon_nodes_extracted,\n                       edges = salmon_edges_aggregated,\n                       directed = TRUE)\n\nsalmon_edges_df <- salmon_graph %>%\n  activate(edges) %>%\n  as_tibble()\n\nsalmon_nodes_df <- salmon_graph %>%\n  activate(nodes) %>%\n  as_tibble() %>%\n  rename(label = id) %>%\n  mutate(id=row_number()) %>%\n  select(id, label)\n\n\n\n\nShow the code\nshark <- fromJSON(\"data/bundles/shark.json\")\n\nshark_edges <- as_tibble(shark$links) %>%\n  mutate(ArrivalDate = ymd(arrivaldate)) %>%\n  mutate(Year = year(ArrivalDate)) %>%\n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu) %>% \n  distinct()\n\nshark_edges_aggregated <- shark_edges %>%\n  group_by(source, target, hscode, Year) %>%\n    summarise(weights = n()) %>%\n  filter(source!=target) %>%\n  ungroup()\n\nshark_nodes <- as_tibble(shark$nodes) %>%\n  select(id, shpcountry, rcvcountry)\n\nshark_id1 <- shark_edges_aggregated %>%\n  select(source) %>%\n  rename(id = source)\nshark_id2 <- shark_edges_aggregated %>%\n  select(target) %>%\n  rename(id = target)\nshark_nodes_extracted <- rbind(shark_id1, shark_id2) %>%\n  distinct()\n\nshark_graph <- tbl_graph(nodes = shark_nodes_extracted,\n                       edges = shark_edges_aggregated,\n                       directed = TRUE)\n\nshark_edges_df <- shark_graph %>%\n  activate(edges) %>%\n  as_tibble()\n\nshark_nodes_df <- shark_graph %>%\n  activate(nodes) %>%\n  as_tibble() %>%\n  rename(label = id) %>%\n  mutate(id=row_number()) %>%\n  select(id, label)\n\n\n\n\nShow the code\ntuna <- fromJSON(\"data/bundles/tuna.json\")\n\ntuna_edges <- as_tibble(tuna$links) %>%\n  mutate(ArrivalDate = ymd(arrivaldate)) %>%\n  mutate(Year = year(ArrivalDate)) %>%\n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu) %>% \n  distinct()\n\ntuna_edges_aggregated <- tuna_edges %>%\n  group_by(source, target, hscode, Year) %>%\n    summarise(weights = n()) %>%\n  filter(source!=target) %>%\n  ungroup()\n\ntuna_nodes <- as_tibble(tuna$nodes) %>%\n  select(id, shpcountry, rcvcountry)\n\ntuna_id1 <- tuna_edges_aggregated %>%\n  select(source) %>%\n  rename(id = source)\ntuna_id2 <- tuna_edges_aggregated %>%\n  select(target) %>%\n  rename(id = target)\ntuna_nodes_extracted <- rbind(tuna_id1, tuna_id2) %>%\n  distinct()\n\ntuna_graph <- tbl_graph(nodes = tuna_nodes_extracted,\n                       edges = tuna_edges_aggregated,\n                       directed = TRUE)\n\ntuna_edges_df <- tuna_graph %>%\n  activate(edges) %>%\n  as_tibble()\n\ntuna_nodes_df <- tuna_graph %>%\n  activate(nodes) %>%\n  as_tibble() %>%\n  rename(label = id) %>%\n  mutate(id=row_number()) %>%\n  select(id, label)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#network-graph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#network-graph",
    "title": "Take-home Exercise 2",
    "section": "3.1 Network graph",
    "text": "3.1 Network graph\n\n3.1.1 Plot network graph over time\nCreate a full graph using the same steps in section 2.3.\n\n\nShow the code\nfull_edges_agg <- mc2_edges %>%\n  group_by(source, target, hscode, Year) %>%\n    summarise(weights = n()) %>%\n  filter(source != target) %>%\n  ungroup()\n\nfull_id1 <- full_edges_agg %>%\n  select(source) %>%\n  rename(id = source)\nfull_id2 <- full_edges_agg %>%\n  select(target) %>%\n  rename(id = target)\nfull_nodes_extracted <- rbind(full_id1, full_id2) %>%\n  distinct()\n\nfull_graph <- tbl_graph(nodes = full_nodes_extracted,\n                       edges = full_edges_agg,\n                       directed = TRUE)\n\nfull_edges_df <- full_graph %>%\n  activate(edges) %>%\n  as_tibble()\n\nfull_nodes_df <- full_graph %>%\n  activate(nodes) %>%\n  as_tibble() %>%\n  rename(label = id) %>%\n  mutate(id = row_number()) %>%\n  select(id, label)\n\n\nBuild an interactive network and explore if there are nodes have similar behaviors.\n\nvisNetwork(nodes_df, edges_df) %>%\n  visIgraphLayout(layout = \"layout_in_circle\") %>%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#suggested-groups-graph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#suggested-groups-graph",
    "title": "Take-home Exercise 2",
    "section": "3.2 Suggested groups graph",
    "text": "3.2 Suggested groups graph\n\n3.2.1 Plot network graph from 12 groups\n\nThe carp group\n\n\nShow the code\nvisNetwork(carp_nodes_df, carp_edges_df) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", smooth = list(enabled = TRUE, type = \"curvedCW\"))\n\n\n\n\n\n\n\n\nThe catfish group\n\n\nShow the code\nvisNetwork(catfish_nodes_df, catfish_edges_df) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", smooth = list(enabled = TRUE, type = \"curvedCW\"))\n\n\n\n\n\n\n\n\nThe chub_mackerel group\n\n\nShow the code\nvisNetwork(chubMackerel_nodes_df, chubMackerel_edges_df) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", smooth = list(enabled = TRUE, type = \"curvedCW\"))\n\n\n\n\n\n\n\n\nThe cod2 group\n\n\nShow the code\nvisNetwork(cod2_nodes_df, cod2_edges_df) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", smooth = list(enabled = TRUE, type = \"curvedCW\"))\n\n\n\n\n\n\n\n\nThe herring group\n\n\nShow the code\nvisNetwork(herring_nodes_df, herring_edges_df) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", smooth = list(enabled = TRUE, type = \"curvedCW\"))\n\n\n\n\n\n\n\n\nThe lichen group\n\n\nShow the code\nvisNetwork(lichen_nodes_df, lichen_edges_df) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", smooth = list(enabled = TRUE, type = \"curvedCW\"))\n\n\n\n\n\n\n\n\nThe mackerel group\n\n\nShow the code\nvisNetwork(mackerel_nodes_df, mackerel_edges_df) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", smooth = list(enabled = TRUE, type = \"curvedCW\"))\n\n\n\n\n\n\n\n\nThe pollock group\n\n\nShow the code\nvisNetwork(pollock_nodes_df, pollock_edges_df) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", smooth = list(enabled = TRUE, type = \"curvedCW\"))\n\n\n\n\n\n\n\n\nThe salmon_wgl group\n\n\nShow the code\nvisNetwork(salmon_wgl_nodes_df, salmon_wgl_edges_df) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", smooth = list(enabled = TRUE, type = \"curvedCW\"))\n\n\n\n\n\n\n\n\nThe salmon group\n\n\nShow the code\nvisNetwork(salmon_nodes_df, salmon_edges_df) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", smooth = list(enabled = TRUE, type = \"curvedCW\"))\n\n\n\n\n\n\n\n\nThe shark group\n\n\nShow the code\nvisNetwork(shark_nodes_df, shark_edges_df) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", smooth = list(enabled = TRUE, type = \"curvedCW\"))\n\n\n\n\n\n\n\n\nThe tuna group\n\n\nShow the code\nvisNetwork(tuna_nodes_df, tuna_edges_df) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", smooth = list(enabled = TRUE, type = \"curvedCW\"))\n\n\n\n\n\n\nFrom network graphs above, we can cluster the 12 groups into 2 clusters according to the number of nodes:\n\nnodes < 100: cod2 (6 nodes), lichen (17 nodes), salmon (8 nodes), shark (10 nodes) and tuna (29 nodes);\nnodes >= 100: carp (241 nodes), catfish (365 nodes), chub_mackerel (192 nodes), herring (195 nodes), mackerel (241 nodes), pollock (108 nodes) and salmon_wgl (120 nodes)\n\nThe nodes in cluster 1 is too few to add more insightful behavior patterns, so we will further analyze the groups in cluster 2 to see which group could complete the graph."
  }
]