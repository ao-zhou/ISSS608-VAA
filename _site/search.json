[
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "The country of Oceanus has sought FishEye International’s help in identifying companies possibly engaged in illegal, unreported, and unregulated (IUU) fishing. As part of the collaboration, FishEye’s analysts received import/export data for Oceanus’ marine and fishing industries. However, Oceanus has informed FishEye that the data is incomplete. To facilitate their analysis, FishEye transformed the trade data into a knowledge graph. Using this knowledge graph, they hope to understand business relationships, including finding links that will help them stop IUU fishing and protect marine species that are affected by it. FishEye analysts found that node-link diagrams gave them a good high-level overview of the knowledge graph. However, they are now looking for visualizations that provide more detail about patterns for entities in the knowledge graph.\n\n\nEvaluate the sets of predicted knowledge graph links FishEye has provided using visual analytics. Which sets are most reliable for completing the graph?\n\n\n\nReference from Mini-Challenge 2 of VAST Challenge 2023."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#task",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#task",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "Evaluate the sets of predicted knowledge graph links FishEye has provided using visual analytics. Which sets are most reliable for completing the graph?"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#reference",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#reference",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "Reference from Mini-Challenge 2 of VAST Challenge 2023."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#getting-started",
    "title": "Take-home Exercise 2",
    "section": "2.1 Getting Started",
    "text": "2.1 Getting Started\nInstall R packages needed for data preparation, data wrangling, data analysis and visualisation using the code chunk below.\n\npacman::p_load(jsonlite, tidyverse, tidygraph, ggraph, visNetwork, igraph)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-import",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-import",
    "title": "Take-home Exercise 2",
    "section": "2.2 Data Import",
    "text": "2.2 Data Import\nThe code chunk below imports data using fromJSON() from jsonlite package into R environment.\n\nmc2_data &lt;- fromJSON(\"data/mc2_challenge_graph.json\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-wrangling",
    "title": "Take-home Exercise 2",
    "section": "2.3 Data Wrangling",
    "text": "2.3 Data Wrangling\n\n2.3.1 The edges data\n\nExtracting edges data\nExtract edges data table from mc2_data list object and save the output in a tibble data frame object called mc2_edges using the code chunk below.\n\nmc2_edges &lt;- as_tibble(mc2_data$links) %&gt;%\n  mutate(ArrivalDate = ymd(arrivaldate)) %&gt;%\n  mutate(Year = year(ArrivalDate)) %&gt;% \n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu, volumeteu, weightkg, valueofgoodsusd) %&gt;%\ndistinct()\n\n\n\n\n\n\n\nNote\n\n\n\n\nymd() of lubridate package (embedded in tidyverse now) is used to covert arrivaldate field from character data type into date data type.\nyear() of lubridate package (embedded in tidyverse now) is used to convert the values in ArrivalDate field into year values.\n\n\n\n\n\nPreparing edges data\nPrepare an aggregated edges table by grouping source, target, hscode, Year and filtering hscode is equal to 306170 and Year is equal to 2034.\n\nmc2_edges_aggregated &lt;- mc2_edges %&gt;%\n  filter(hscode == \"306170\" & Year == \"2034\") %&gt;%\n  group_by(source, target, hscode, Year) %&gt;%\n    summarise(weights = n()) %&gt;%\n  filter(source != target) %&gt;%\n  filter(weights &gt; 20) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\nNote\n\n\n\n\nsummarise() is used to count the aggregated records.\nfilter() is then used to perform two selection:\n\nto select all records whereby source are not equal to target, and\nto select all records whereby the values of their weights field are greater than 20\n\n\n\n\n\n\n\n2.3.2 The nodes data\n\nExtracting nodes data\nExtract nodes data table from mc2_data list object and save the output in a tibble data frame object called mc2_nodes using the code chunk below.\n\nmc2_nodes &lt;- as_tibble(mc2_data$nodes) %&gt;%\n  select(id, shpcountry, rcvcountry)\n\n\n\nPreparing nodes data\nTo ensure that all the nodes in the nodes data tables include all the source and target values, we will prepare a new nodes data table using the source and target fields of mc2_edges_aggregated data table.\n\nid1 &lt;- mc2_edges_aggregated %&gt;%\n  select(source) %&gt;%\n  rename(id = source)\nid2 &lt;- mc2_edges_aggregated %&gt;%\n  select(target) %&gt;%\n  rename(id = target)\nmc2_nodes_extracted &lt;- rbind(id1, id2) %&gt;%\n  distinct()\n\n\n\n\n2.3.3 Building the tidygraph data\nThe code chunk below is used to build the tidygraph data model.\n\nmc2_graph &lt;- tbl_graph(nodes = mc2_nodes_extracted,\n                       edges = mc2_edges_aggregated,\n                       directed = TRUE)\n\n\nReview the output of tidygraph’s graph object\n\nThe output below reveals that mc2_graph is a tbl_graph object with 2358 nodes and 4685 edges.\n\n\n\nShow the code\nmc2_graph\n\n\n# A tbl_graph: 191 nodes and 291 edges\n#\n# A directed acyclic simple graph with 9 components\n#\n# A tibble: 191 × 1\n  id                                             \n  &lt;chr&gt;                                          \n1 1 Ltd. Liability Co Cargo                      \n2 Adriatic Catch Ltd. Liability Co Transportation\n3 Adriatic Tuna AS Solutions                     \n4 Aqua Adventures Carriers Seabed                \n5 Aqua Azul LC International                     \n6 Aqua Mermaid Sagl Merchants                    \n# ℹ 185 more rows\n#\n# A tibble: 291 × 5\n   from    to hscode  Year weights\n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;dbl&gt;   &lt;int&gt;\n1     1   108 306170  2034      24\n2     2   109 306170  2034      47\n3     2   110 306170  2034      23\n# ℹ 288 more rows\n\n\n\n\nVisualising the tidygraph data model\nUse function from ggraph package to plot a simple network graph to check if the tidygraph model has been prepared correctly.\n\nggraph(mc2_graph,\n       layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes()) +\n  theme_graph()\n\n\n\n\nExport data objects into rds format for future use.\n\nwrite_rds(mc2_nodes_extracted, \"data/mc2_nodes_extracted.rds\")\nwrite_rds(mc2_edges_aggregated, \"data/mc2_edges_aggregated.rds\")\nwrite_rds(mc2_graph, \"data/mc2_graph.rds\")\n\n\n\n\n2.3.4 Preparing network data for visNetwork\nPrepare two tibble data frames (one for nodes and one for edges), so that we can plot interactive network graph using visNetwork package.\n\nPreparing edges tibble data frame\nNote that tidygraph model is in R list format. The code chunk below will be used to extract and convert the edges into a tibble data frame.\n\nedges_df &lt;- mc2_graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble()\n\n\n\nPreparing nodes tibble data frame\nUse the code chunk below to prepare a nodes tibble data frame.\n\nnodes_df &lt;- mc2_graph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  rename(label = id) %&gt;%\n  mutate(id = row_number()) %&gt;%\n  select(id, label)\n\n\n\n\n\n\n\nImportant\n\n\n\nvisNetwork is expecting a field called id in the tibble data frame. The field must be in numeric data type and it must be unique to the values in the from and to field of edges_df.\n\n\n\n\nPlotting a simple interactive network graph\nTo ensure that the tibble data frames are confirmed to the requirements of visNetwork, we will plot a simple interactive graph by using the code chunk below.\n\nrequire(devtools)\ninstall_version(\"knitr\", version = \"1.42\", repos = \"http://cran.us.r-project.org\")\n\n\n\n\n\n\n\nImportant\n\n\n\nEncountering error while rendering with knitr 1.43. Thus using devtools to install older version of knitr.\n\n\n\nvisNetwork(nodes_df,\n           edges_df) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#preparing-groups-data",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#preparing-groups-data",
    "title": "Take-home Exercise 2",
    "section": "2.4 Preparing groups data",
    "text": "2.4 Preparing groups data\nUse the same methodology from section 2.3 to prepare network data from groups identified by FishEye.\n\n\nShow the code\ncarp &lt;- fromJSON(\"data/bundles/carp.json\")\n\ncarp_edges &lt;- as_tibble(carp$links) %&gt;%\n  mutate(ArrivalDate = ymd(arrivaldate)) %&gt;%\n  mutate(Year = year(ArrivalDate)) %&gt;%\n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu, \n         volumeteu, weightkg) %&gt;% \n  distinct()\n\ncarp_edges_aggregated &lt;- carp_edges %&gt;%\n  group_by(source, target, hscode, Year) %&gt;%\n    summarise(weights = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  ungroup()\n\ncarp_nodes &lt;- as_tibble(carp$nodes) %&gt;%\n  select(id, shpcountry, rcvcountry)\n\ncarp_id1 &lt;- carp_edges_aggregated %&gt;%\n  select(source) %&gt;%\n  rename(id = source)\ncarp_id2 &lt;- carp_edges_aggregated %&gt;%\n  select(target) %&gt;%\n  rename(id = target)\ncarp_nodes_extracted &lt;- rbind(carp_id1, carp_id2) %&gt;%\n  distinct()\n\ncarp_graph &lt;- tbl_graph(nodes = carp_nodes_extracted,\n                       edges = carp_edges_aggregated,\n                       directed = TRUE)\n\ncarp_edges_df &lt;- carp_graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble()\n\n\ncarp_nodes_df &lt;- carp_graph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  rename(label = id) %&gt;%\n  mutate(id=row_number()) %&gt;%\n  select(id, label)\n\n\n\n\nShow the code\ncatfish &lt;- fromJSON(\"data/bundles/catfish.json\")\n\ncatfish_edges &lt;- as_tibble(catfish$links) %&gt;%\n  mutate(ArrivalDate = ymd(arrivaldate)) %&gt;%\n  mutate(Year = year(ArrivalDate)) %&gt;%\n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu) %&gt;% \n  distinct()\n\ncatfish_edges_aggregated &lt;- catfish_edges %&gt;%\n  group_by(source, target, hscode, Year) %&gt;%\n    summarise(weights = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  ungroup()\n\ncatfish_nodes &lt;- as_tibble(catfish$nodes) %&gt;%\n  select(id, shpcountry, rcvcountry)\n\ncatfish_id1 &lt;- catfish_edges_aggregated %&gt;%\n  select(source) %&gt;%\n  rename(id = source)\ncatfish_id2 &lt;- catfish_edges_aggregated %&gt;%\n  select(target) %&gt;%\n  rename(id = target)\ncatfish_nodes_extracted &lt;- rbind(catfish_id1, catfish_id2) %&gt;%\n  distinct()\n\ncatfish_graph &lt;- tbl_graph(nodes = catfish_nodes_extracted,\n                       edges = catfish_edges_aggregated,\n                       directed = TRUE)\n\ncatfish_edges_df &lt;- catfish_graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble()\n\n\ncatfish_nodes_df &lt;- catfish_graph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  rename(label = id) %&gt;%\n  mutate(id=row_number()) %&gt;%\n  select(id, label)\n\n\n\n\nShow the code\nchubMackerel &lt;- fromJSON(\"data/bundles/chub_mackerel.json\")\n\nchubMackerel_edges &lt;- as_tibble(chubMackerel$links) %&gt;%\n  mutate(ArrivalDate = ymd(arrivaldate)) %&gt;%\n  mutate(Year = year(ArrivalDate)) %&gt;%\n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu) %&gt;% \n  distinct()\n\nchubMackerel_edges_aggregated &lt;- chubMackerel_edges %&gt;%\n  group_by(source, target, hscode, Year) %&gt;%\n    summarise(weights = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  ungroup()\n\nchubMackerel_nodes &lt;- as_tibble(chubMackerel$nodes) %&gt;%\n  select(id, shpcountry, rcvcountry)\n\nchubMackerel_id1 &lt;- chubMackerel_edges_aggregated %&gt;%\n  select(source) %&gt;%\n  rename(id = source)\nchubMackerel_id2 &lt;- chubMackerel_edges_aggregated %&gt;%\n  select(target) %&gt;%\n  rename(id = target)\nchubMackerel_nodes_extracted &lt;- rbind(chubMackerel_id1, chubMackerel_id2) %&gt;%\n  distinct()\n\nchubMackerel_graph &lt;- tbl_graph(nodes = chubMackerel_nodes_extracted,\n                       edges = chubMackerel_edges_aggregated,\n                       directed = TRUE)\n\nchubMackerel_edges_df &lt;- chubMackerel_graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble()\n\n\nchubMackerel_nodes_df &lt;- chubMackerel_graph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  rename(label = id) %&gt;%\n  mutate(id=row_number()) %&gt;%\n  select(id, label)\n\n\n\n\nShow the code\ncod2 &lt;- fromJSON(\"data/bundles/cod2.json\")\n\ncod2_edges &lt;- as_tibble(cod2$links) %&gt;%\n  mutate(ArrivalDate = ymd(arrivaldate)) %&gt;%\n  mutate(Year = year(ArrivalDate)) %&gt;%\n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu) %&gt;% \n  distinct()\n\ncod2_edges_aggregated &lt;- cod2_edges %&gt;%\n  group_by(source, target, hscode, Year) %&gt;%\n    summarise(weights = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  ungroup()\n\ncod2_nodes &lt;- as_tibble(cod2$nodes) %&gt;%\n  select(id, shpcountry, rcvcountry)\n\ncod2_id1 &lt;- cod2_edges_aggregated %&gt;%\n  select(source) %&gt;%\n  rename(id = source)\ncod2_id2 &lt;- cod2_edges_aggregated %&gt;%\n  select(target) %&gt;%\n  rename(id = target)\ncod2_nodes_extracted &lt;- rbind(cod2_id1, cod2_id2) %&gt;%\n  distinct()\n\ncod2_graph &lt;- tbl_graph(nodes = cod2_nodes_extracted,\n                       edges = cod2_edges_aggregated,\n                       directed = TRUE)\n\ncod2_edges_df &lt;- cod2_graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble()\n\n\ncod2_nodes_df &lt;- cod2_graph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  rename(label = id) %&gt;%\n  mutate(id=row_number()) %&gt;%\n  select(id, label)\n\n\n\n\nShow the code\nherring &lt;- fromJSON(\"data/bundles/herring.json\")\n\nherring_edges &lt;- as_tibble(herring$links) %&gt;%\n  mutate(ArrivalDate = ymd(arrivaldate)) %&gt;%\n  mutate(Year = year(ArrivalDate)) %&gt;%\n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu) %&gt;% \n  distinct()\n\nherring_edges_aggregated &lt;- herring_edges %&gt;%\n  group_by(source, target, hscode, Year) %&gt;%\n    summarise(weights = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  ungroup()\n\nherring_nodes &lt;- as_tibble(herring$nodes) %&gt;%\n  select(id, shpcountry, rcvcountry)\n\nherring_id1 &lt;- herring_edges_aggregated %&gt;%\n  select(source) %&gt;%\n  rename(id = source)\nherring_id2 &lt;- herring_edges_aggregated %&gt;%\n  select(target) %&gt;%\n  rename(id = target)\nherring_nodes_extracted &lt;- rbind(herring_id1, herring_id2) %&gt;%\n  distinct()\n\nherring_graph &lt;- tbl_graph(nodes = herring_nodes_extracted,\n                       edges = herring_edges_aggregated,\n                       directed = TRUE)\n\nherring_edges_df &lt;- herring_graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble()\n\nherring_nodes_df &lt;- herring_graph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  rename(label = id) %&gt;%\n  mutate(id=row_number()) %&gt;%\n  select(id, label)\n\n\n\n\nShow the code\nlichen &lt;- fromJSON(\"data/bundles/lichen.json\")\n\nlichen_edges &lt;- as_tibble(lichen$links) %&gt;%\n  mutate(ArrivalDate = ymd(arrivaldate)) %&gt;%\n  mutate(Year = year(ArrivalDate)) %&gt;%\n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu) %&gt;% \n  distinct()\n\nlichen_edges_aggregated &lt;- lichen_edges %&gt;%\n  group_by(source, target, hscode, Year) %&gt;%\n    summarise(weights = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  ungroup()\n\nlichen_nodes &lt;- as_tibble(lichen$nodes) %&gt;%\n  select(id, shpcountry, rcvcountry)\n\nlichen_id1 &lt;- lichen_edges_aggregated %&gt;%\n  select(source) %&gt;%\n  rename(id = source)\nlichen_id2 &lt;- lichen_edges_aggregated %&gt;%\n  select(target) %&gt;%\n  rename(id = target)\nlichen_nodes_extracted &lt;- rbind(lichen_id1, lichen_id2) %&gt;%\n  distinct()\n\nlichen_graph &lt;- tbl_graph(nodes = lichen_nodes_extracted,\n                       edges = lichen_edges_aggregated,\n                       directed = TRUE)\n\nlichen_edges_df &lt;- lichen_graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble()\n\nlichen_nodes_df &lt;- lichen_graph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  rename(label = id) %&gt;%\n  mutate(id=row_number()) %&gt;%\n  select(id, label)\n\n\n\n\nShow the code\nmackerel &lt;- fromJSON(\"data/bundles/mackerel.json\")\n\nmackerel_edges &lt;- as_tibble(mackerel$links) %&gt;%\n  mutate(ArrivalDate = ymd(arrivaldate)) %&gt;%\n  mutate(Year = year(ArrivalDate)) %&gt;%\n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu) %&gt;% \n  distinct()\n\nmackerel_edges_aggregated &lt;- mackerel_edges %&gt;%\n  group_by(source, target, hscode, Year) %&gt;%\n    summarise(weights = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  ungroup()\n\nmackerel_nodes &lt;- as_tibble(mackerel$nodes) %&gt;%\n  select(id, shpcountry, rcvcountry)\n\nmackerel_id1 &lt;- mackerel_edges_aggregated %&gt;%\n  select(source) %&gt;%\n  rename(id = source)\nmackerel_id2 &lt;- mackerel_edges_aggregated %&gt;%\n  select(target) %&gt;%\n  rename(id = target)\nmackerel_nodes_extracted &lt;- rbind(mackerel_id1, mackerel_id2) %&gt;%\n  distinct()\n\nmackerel_graph &lt;- tbl_graph(nodes = mackerel_nodes_extracted,\n                       edges = mackerel_edges_aggregated,\n                       directed = TRUE)\n\nmackerel_edges_df &lt;- mackerel_graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble()\n\nmackerel_nodes_df &lt;- mackerel_graph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  rename(label = id) %&gt;%\n  mutate(id=row_number()) %&gt;%\n  select(id, label)\n\n\n\n\nShow the code\npollock &lt;- fromJSON(\"data/bundles/pollock.json\")\n\npollock_edges &lt;- as_tibble(pollock$links) %&gt;%\n  mutate(ArrivalDate = ymd(arrivaldate)) %&gt;%\n  mutate(Year = year(ArrivalDate)) %&gt;%\n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu) %&gt;% \n  distinct()\n\npollock_edges_aggregated &lt;- pollock_edges %&gt;%\n  group_by(source, target, hscode, Year) %&gt;%\n    summarise(weights = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  ungroup()\n\npollock_nodes &lt;- as_tibble(pollock$nodes) %&gt;%\n  select(id, shpcountry, rcvcountry)\n\npollock_id1 &lt;- pollock_edges_aggregated %&gt;%\n  select(source) %&gt;%\n  rename(id = source)\npollock_id2 &lt;- pollock_edges_aggregated %&gt;%\n  select(target) %&gt;%\n  rename(id = target)\npollock_nodes_extracted &lt;- rbind(pollock_id1, pollock_id2) %&gt;%\n  distinct()\n\npollock_graph &lt;- tbl_graph(nodes = pollock_nodes_extracted,\n                       edges = pollock_edges_aggregated,\n                       directed = TRUE)\n\npollock_edges_df &lt;- pollock_graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble()\n\npollock_nodes_df &lt;- pollock_graph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  rename(label = id) %&gt;%\n  mutate(id=row_number()) %&gt;%\n  select(id, label)\n\n\n\n\nShow the code\nsalmon_wgl &lt;- fromJSON(\"data/bundles/salmon_wgl.json\")\n\nsalmon_wgl_edges &lt;- as_tibble(salmon_wgl$links) %&gt;%\n  mutate(ArrivalDate = ymd(arrivaldate)) %&gt;%\n  mutate(Year = year(ArrivalDate)) %&gt;%\n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu) %&gt;% \n  distinct()\n\nsalmon_wgl_edges_aggregated &lt;- salmon_wgl_edges %&gt;%\n  group_by(source, target, hscode, Year) %&gt;%\n    summarise(weights = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  ungroup()\n\nsalmon_wgl_nodes &lt;- as_tibble(salmon_wgl$nodes) %&gt;%\n  select(id, shpcountry, rcvcountry)\n\nsalmon_wgl_id1 &lt;- salmon_wgl_edges_aggregated %&gt;%\n  select(source) %&gt;%\n  rename(id = source)\nsalmon_wgl_id2 &lt;- salmon_wgl_edges_aggregated %&gt;%\n  select(target) %&gt;%\n  rename(id = target)\nsalmon_wgl_nodes_extracted &lt;- rbind(salmon_wgl_id1, salmon_wgl_id2) %&gt;%\n  distinct()\n\nsalmon_wgl_graph &lt;- tbl_graph(nodes = salmon_wgl_nodes_extracted,\n                       edges = salmon_wgl_edges_aggregated,\n                       directed = TRUE)\n\nsalmon_wgl_edges_df &lt;- salmon_wgl_graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble()\n\nsalmon_wgl_nodes_df &lt;- salmon_wgl_graph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  rename(label = id) %&gt;%\n  mutate(id=row_number()) %&gt;%\n  select(id, label)\n\n\n\n\nShow the code\nsalmon &lt;- fromJSON(\"data/bundles/salmon.json\")\n\nsalmon_edges &lt;- as_tibble(salmon$links) %&gt;%\n  mutate(ArrivalDate = ymd(arrivaldate)) %&gt;%\n  mutate(Year = year(ArrivalDate)) %&gt;%\n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu) %&gt;% \n  distinct()\n\nsalmon_edges_aggregated &lt;- salmon_edges %&gt;%\n  group_by(source, target, hscode, Year) %&gt;%\n    summarise(weights = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  ungroup()\n\nsalmon_nodes &lt;- as_tibble(salmon$nodes) %&gt;%\n  select(id, shpcountry, rcvcountry)\n\nsalmon_id1 &lt;- salmon_edges_aggregated %&gt;%\n  select(source) %&gt;%\n  rename(id = source)\nsalmon_id2 &lt;- salmon_edges_aggregated %&gt;%\n  select(target) %&gt;%\n  rename(id = target)\nsalmon_nodes_extracted &lt;- rbind(salmon_id1, salmon_id2) %&gt;%\n  distinct()\n\nsalmon_graph &lt;- tbl_graph(nodes = salmon_nodes_extracted,\n                       edges = salmon_edges_aggregated,\n                       directed = TRUE)\n\nsalmon_edges_df &lt;- salmon_graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble()\n\nsalmon_nodes_df &lt;- salmon_graph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  rename(label = id) %&gt;%\n  mutate(id=row_number()) %&gt;%\n  select(id, label)\n\n\n\n\nShow the code\nshark &lt;- fromJSON(\"data/bundles/shark.json\")\n\nshark_edges &lt;- as_tibble(shark$links) %&gt;%\n  mutate(ArrivalDate = ymd(arrivaldate)) %&gt;%\n  mutate(Year = year(ArrivalDate)) %&gt;%\n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu) %&gt;% \n  distinct()\n\nshark_edges_aggregated &lt;- shark_edges %&gt;%\n  group_by(source, target, hscode, Year) %&gt;%\n    summarise(weights = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  ungroup()\n\nshark_nodes &lt;- as_tibble(shark$nodes) %&gt;%\n  select(id, shpcountry, rcvcountry)\n\nshark_id1 &lt;- shark_edges_aggregated %&gt;%\n  select(source) %&gt;%\n  rename(id = source)\nshark_id2 &lt;- shark_edges_aggregated %&gt;%\n  select(target) %&gt;%\n  rename(id = target)\nshark_nodes_extracted &lt;- rbind(shark_id1, shark_id2) %&gt;%\n  distinct()\n\nshark_graph &lt;- tbl_graph(nodes = shark_nodes_extracted,\n                       edges = shark_edges_aggregated,\n                       directed = TRUE)\n\nshark_edges_df &lt;- shark_graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble()\n\nshark_nodes_df &lt;- shark_graph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  rename(label = id) %&gt;%\n  mutate(id=row_number()) %&gt;%\n  select(id, label)\n\n\n\n\nShow the code\ntuna &lt;- fromJSON(\"data/bundles/tuna.json\")\n\ntuna_edges &lt;- as_tibble(tuna$links) %&gt;%\n  mutate(ArrivalDate = ymd(arrivaldate)) %&gt;%\n  mutate(Year = year(ArrivalDate)) %&gt;%\n  select(source, target, ArrivalDate, Year, hscode, valueofgoods_omu) %&gt;% \n  distinct()\n\ntuna_edges_aggregated &lt;- tuna_edges %&gt;%\n  group_by(source, target, hscode, Year) %&gt;%\n    summarise(weights = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  ungroup()\n\ntuna_nodes &lt;- as_tibble(tuna$nodes) %&gt;%\n  select(id, shpcountry, rcvcountry)\n\ntuna_id1 &lt;- tuna_edges_aggregated %&gt;%\n  select(source) %&gt;%\n  rename(id = source)\ntuna_id2 &lt;- tuna_edges_aggregated %&gt;%\n  select(target) %&gt;%\n  rename(id = target)\ntuna_nodes_extracted &lt;- rbind(tuna_id1, tuna_id2) %&gt;%\n  distinct()\n\ntuna_graph &lt;- tbl_graph(nodes = tuna_nodes_extracted,\n                       edges = tuna_edges_aggregated,\n                       directed = TRUE)\n\ntuna_edges_df &lt;- tuna_graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble()\n\ntuna_nodes_df &lt;- tuna_graph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  rename(label = id) %&gt;%\n  mutate(id=row_number()) %&gt;%\n  select(id, label)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#network-graph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#network-graph",
    "title": "Take-home Exercise 2",
    "section": "3.1 Network graph",
    "text": "3.1 Network graph\n\n3.1.1 Plot network graph\nCreate a full graph using the same steps in section 2.3.\n\n\nShow the code\nfull_edges_agg &lt;- mc2_edges %&gt;%\n  group_by(source, target, hscode, Year) %&gt;%\n    summarise(weights = n()) %&gt;%\n  filter(source != target) %&gt;%\n  ungroup()\n\nfull_id1 &lt;- full_edges_agg %&gt;%\n  select(source) %&gt;%\n  rename(id = source)\nfull_id2 &lt;- full_edges_agg %&gt;%\n  select(target) %&gt;%\n  rename(id = target)\nfull_nodes_extracted &lt;- rbind(full_id1, full_id2) %&gt;%\n  distinct()\n\nfull_graph &lt;- tbl_graph(nodes = full_nodes_extracted,\n                       edges = full_edges_agg,\n                       directed = TRUE)\n\nfull_edges_df &lt;- full_graph %&gt;%\n  activate(edges) %&gt;%\n  as_tibble()\n\nfull_nodes_df &lt;- full_graph %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  rename(label = id) %&gt;%\n  mutate(id = row_number()) %&gt;%\n  select(id, label)\n\n\nBuild an interactive network and explore if there are nodes have similar behaviors.\n\nvisNetwork(nodes_df, edges_df) %&gt;%\n  visIgraphLayout(layout = \"layout_in_circle\") %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#suggested-groups-graph",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#suggested-groups-graph",
    "title": "Take-home Exercise 2",
    "section": "3.2 Suggested groups graph",
    "text": "3.2 Suggested groups graph\n\n3.2.1 Plot network graph from 12 groups\n\nThe carp group\n\n\nShow the code\nvisNetwork(carp_nodes_df, carp_edges_df) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", smooth = list(enabled = TRUE, type = \"curvedCW\"))\n\n\n\n\n\n\n\n\nThe catfish group\n\n\nShow the code\nvisNetwork(catfish_nodes_df, catfish_edges_df) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", smooth = list(enabled = TRUE, type = \"curvedCW\"))\n\n\n\n\n\n\n\n\nThe chub_mackerel group\n\n\nShow the code\nvisNetwork(chubMackerel_nodes_df, chubMackerel_edges_df) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", smooth = list(enabled = TRUE, type = \"curvedCW\"))\n\n\n\n\n\n\n\n\nThe cod2 group\n\n\nShow the code\nvisNetwork(cod2_nodes_df, cod2_edges_df) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", smooth = list(enabled = TRUE, type = \"curvedCW\"))\n\n\n\n\n\n\n\n\nThe herring group\n\n\nShow the code\nvisNetwork(herring_nodes_df, herring_edges_df) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", smooth = list(enabled = TRUE, type = \"curvedCW\"))\n\n\n\n\n\n\n\n\nThe lichen group\n\n\nShow the code\nvisNetwork(lichen_nodes_df, lichen_edges_df) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", smooth = list(enabled = TRUE, type = \"curvedCW\"))\n\n\n\n\n\n\n\n\nThe mackerel group\n\n\nShow the code\nvisNetwork(mackerel_nodes_df, mackerel_edges_df) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", smooth = list(enabled = TRUE, type = \"curvedCW\"))\n\n\n\n\n\n\n\n\nThe pollock group\n\n\nShow the code\nvisNetwork(pollock_nodes_df, pollock_edges_df) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", smooth = list(enabled = TRUE, type = \"curvedCW\"))\n\n\n\n\n\n\n\n\nThe salmon_wgl group\n\n\nShow the code\nvisNetwork(salmon_wgl_nodes_df, salmon_wgl_edges_df) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", smooth = list(enabled = TRUE, type = \"curvedCW\"))\n\n\n\n\n\n\n\n\nThe salmon group\n\n\nShow the code\nvisNetwork(salmon_nodes_df, salmon_edges_df) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", smooth = list(enabled = TRUE, type = \"curvedCW\"))\n\n\n\n\n\n\n\n\nThe shark group\n\n\nShow the code\nvisNetwork(shark_nodes_df, shark_edges_df) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", smooth = list(enabled = TRUE, type = \"curvedCW\"))\n\n\n\n\n\n\n\n\nThe tuna group\n\n\nShow the code\nvisNetwork(tuna_nodes_df, tuna_edges_df) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", smooth = list(enabled = TRUE, type = \"curvedCW\"))\n\n\n\n\n\n\nFrom network graphs above, we can cluster the 12 groups into 2 clusters according to the number of nodes:\n\nnodes &lt; 100: cod2 (6 nodes), lichen (17 nodes), salmon (8 nodes), shark (10 nodes) and tuna (29 nodes);\nnodes &gt;= 100: carp (241 nodes), catfish (365 nodes), chub_mackerel (192 nodes), herring (195 nodes), mackerel (241 nodes), pollock (108 nodes) and salmon_wgl (120 nodes)\n\nThe nodes in cluster 1 is too few to add more insightful behavior patterns, so we will further analyze the groups in cluster 2 to see which group could complete the graph."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "lubridate is part of tidyverse now, so there is no need to import lubridate separately.\n\n\nShow the code\npacman::p_load(igraph, tidyverse, tidygraph, ggraph, visNetwork, clock, graphlayouts)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#import-nodes-and-edges-data",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#import-nodes-and-edges-data",
    "title": "In-class Exercise 5",
    "section": "2.1 Import nodes and edges data",
    "text": "2.1 Import nodes and edges data\n\n\nShow the code\nGAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\n\n\n\n\n\n\n\nTip\n\n\n\nFor the edges data frame, the first column should always be source and second column be target.\n\n\n\n\n\n\n\n\nThis is import.\n\n\n\nFor missing values, use “unknown” or “no value” instead of build-in missing value function to avoid losing the data entry."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#review-the-imported-data",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#review-the-imported-data",
    "title": "In-class Exercise 5",
    "section": "2.2 Review the imported data",
    "text": "2.2 Review the imported data\nUse glimpse() of dplyr to examine the structure of the data frame.\n\n\nShow the code\nglimpse(GAStech_edges)\n\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\nNotice that the SentDate is categorized as “Character” instead of “Date” data type, and we need to change it back to “Date”data type before further analysis."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#data-wrangling",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html#data-wrangling",
    "title": "In-class Exercise 5",
    "section": "2.3 Data wrangling",
    "text": "2.3 Data wrangling\n\n2.3.1 Wrangling Time\nThe code chunk below will change the data type of SentDate to “Date”.\n\n\nShow the code\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate, label = TRUE, abbr = FALSE))\n\n\nReview the data again after the change.\n\n\nShow the code\nglimpse(GAStech_edges)\n\n\nRows: 9,063\nColumns: 10\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    &lt;date&gt; 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     &lt;ord&gt; Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…\n\n\n\n\n2.3.2 Wrangling attributes\nWith a close examination, GAStech_edges data.frame is at email records level, which is not very useful for visualization. Therefore, we will aggregate individual by date, senders, receivers, main subject and day of the week.\n\n\nShow the code\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source != target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\n\nTip\n\n\n\nAlways check dplyr to use the latest way to wrangle data. Google result may show old ways to solve a problem\n\n\n\n\n\n\n\n\nNote\n\n\n\nungroup() at the end of the code chunk is for future calculation. If it’s not done, when we do calculation later it will be based on the grouped data.\n\n\nReview the data again after the change.\n\n\nShow the code\nglimpse(GAStech_edges_aggregated)\n\n\nRows: 1,372\nColumns: 4\n$ source  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  &lt;dbl&gt; 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday &lt;ord&gt; Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  &lt;int&gt; 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Take-home Exercise 03",
    "section": "",
    "text": "FishEye International, a non-profit focused on countering illegal, unreported, and unregulated (IUU) fishing, has been given access to an international finance corporation’s database on fishing related companies. In the past, FishEye has determined that companies with anomalous structures are far more likely to be involved in IUU (or other “fishy” business). FishEye has transformed the database into a knowledge graph. It includes information about companies, owners, workers, and financial status. FishEye is aiming to use this graph to identify anomalies that could indicate a company is involved in IUU.\nFishEye analysts have attempted to use traditional node-link visualizations and standard graph analyses, but these were found to be ineffective because the scale and detail in the data can obscure a business’s true structure. Can you help FishEye develop a new visual analytics approach to better understand fishing business anomalies\n\n\n\n\n\n\nReference to Mini-Challenge 3 of VAST Challenge 2023."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#background",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#background",
    "title": "Take-home Exercise 03",
    "section": "",
    "text": "FishEye International, a non-profit focused on countering illegal, unreported, and unregulated (IUU) fishing, has been given access to an international finance corporation’s database on fishing related companies. In the past, FishEye has determined that companies with anomalous structures are far more likely to be involved in IUU (or other “fishy” business). FishEye has transformed the database into a knowledge graph. It includes information about companies, owners, workers, and financial status. FishEye is aiming to use this graph to identify anomalies that could indicate a company is involved in IUU.\nFishEye analysts have attempted to use traditional node-link visualizations and standard graph analyses, but these were found to be ineffective because the scale and detail in the data can obscure a business’s true structure. Can you help FishEye develop a new visual analytics approach to better understand fishing business anomalies"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#reference",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#reference",
    "title": "Take-home Exercise 03",
    "section": "",
    "text": "Reference to Mini-Challenge 3 of VAST Challenge 2023."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#getting-started",
    "title": "Take-home Exercise 03",
    "section": "2.1 Getting Started",
    "text": "2.1 Getting Started\nInstall R packages needed for data preparation, data wrangling, data analysis and visualisation using the code chunk below.\n\npacman::p_load(jsonlite, tidygraph, ggraph, visNetwork, graphlayouts, ggforce, tidytext, tidyverse, skimr)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-import",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-import",
    "title": "Take-home Exercise 03",
    "section": "2.2 Data Import",
    "text": "2.2 Data Import\nThe code chunk below imports data using fromJSON() from jsonlitepackage into R environment.\n\nmc3_data &lt;- fromJSON(\"data/MC3.json\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-wrangling",
    "title": "Take-home Exercise 03",
    "section": "2.3 Data Wrangling",
    "text": "2.3 Data Wrangling\n\n2.3.1 The edges data\nThe code chunk below will be used to extract the links data.frame of mc3_data and save it as a tibble data.frame called mc3_edges.\n\nmc3_edges &lt;- as_tibble(mc3_data$links) %&gt;%\n  distinct() %&gt;%\n  mutate(source = as.character(source),\n         target = as.character(target),\n         type = as.character(type)) %&gt;%\n  group_by(source, target, type) %&gt;%\n  summarise(weights = n()) %&gt;%\n  filter(source != target) %&gt;%\n  ungroup()\n\n\n\n2.3.2 The nods data\nThe code chunk below will be used to extract the nodes data.frame of mc3_data and save it as a tibble data.frame called mc3_nodes.\n\nmc3_nodes &lt;- as_tibble(mc3_data$nodes) %&gt;%\n  mutate(country = as.character(country),\n         id = as.character(id),\n         product_services = as.character(product_services),\n         revenue_omu = as.numeric(as.character(revenue_omu)),\n         type = as.character(type)) %&gt;%\n  select(id, country, type, revenue_omu, product_services)\n\nInstead of using the nodes data table extracted from mc3_data, we will prepare a new nodes data table by using the source and target fields of mc3_edges data table. This is necessary to ensure that the nodes in nodes data tables include all the source and target values.\n\nid1 &lt;- mc3_edges %&gt;%\n  select(source) %&gt;%\n  rename(id = source)\n\nid2 &lt;- mc3_edges %&gt;%\n  select(target) %&gt;%\n  rename(id = target)\n\nmc3_nodes1 &lt;- rbind(id1, id2) %&gt;%\n  distinct() %&gt;%\n  left_join(mc3_nodes, unmatched = \"drop\")\n\n\n\n2.3.3 EDA\n\nExploring the edges data\nDisplay the statistics summary of mc3_edges tibble data frame using skim() from skimr package per code chunk below.\n\nskim(mc3_edges)\n\n\nData summary\n\n\nName\nmc3_edges\n\n\nNumber of rows\n24036\n\n\nNumber of columns\n4\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsource\n0\n1\n6\n700\n0\n12856\n0\n\n\ntarget\n0\n1\n6\n28\n0\n21265\n0\n\n\ntype\n0\n1\n16\n16\n0\n2\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nweights\n0\n1\n1\n0\n1\n1\n1\n1\n1\n▁▁▇▁▁\n\n\n\n\n\nWe can tell there is no missing value form the report above.\nDisplay the mc3_edges tibble data frame as an interactive table on the html document using datatable() from DT package per code chunk below.\n\nThe codeThe table\n\n\n\nDT::datatable(mc3_edges)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = mc3_edges, aes(x = type)) +\n  geom_bar()\n\n\n\n\n\n\nExploring the nodes data\nDisplay the statistics summary of mc3_nodes tibble data frame using skim() from skimr package per code chunk below.\n\nskim(mc3_nodes)\n\n\nData summary\n\n\nName\nmc3_nodes\n\n\nNumber of rows\n27622\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n4\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nid\n0\n1\n6\n64\n0\n22929\n0\n\n\ncountry\n0\n1\n2\n15\n0\n100\n0\n\n\ntype\n0\n1\n7\n16\n0\n3\n0\n\n\nproduct_services\n0\n1\n4\n1737\n0\n3244\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrevenue_omu\n21515\n0.22\n1822155\n18184433\n3652.23\n7676.36\n16210.68\n48327.66\n310612303\n▇▁▁▁▁\n\n\n\n\n\nWe can tell there is no missing value form the report above.\nDisplay the mc3_nodes tibble data frame as an interactive table on the html document using datatable() from DT package per code chunk below.\n\nThe codeThe table\n\n\n\nDT::datatable(mc3_nodes)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = mc3_nodes, aes(x = type)) +\n  geom_bar()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#initial-network-visualisation",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#initial-network-visualisation",
    "title": "Take-home Exercise 03",
    "section": "3.1 Initial Network Visualisation",
    "text": "3.1 Initial Network Visualisation\n\n3.1.1 Network model with tidygraph\n\nmc3_graph &lt;- tbl_graph(nodes = mc3_nodes1,\n                       edges = mc3_edges,\n                       directed = FALSE) %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness(),\n         closeness_centrality = centrality_betweenness())\n\n\nmc3_graph %&gt;%\n  filter(betweenness_centrality &gt;= 100000) %&gt;%\n  ggraph(layout = \"fr\") +\n  geom_edge_link(aes(alpha=0.5)) +\n  geom_node_point(aes(size=betweenness_centrality, colors=\"lightblue\", alpha=0.5)) +\n  scale_size_continuous(range = c(1, 10)) +\n  theme_graph()\n\n\n\n\n\n\n3.1.2 Text sensing with tidytext\n\nSimple word count\nCalculating the number of word “fish” appeared in the field product_services using the code chunk below.\n\nmc3_nodes %&gt;%\n  mutate(n_fish = str_count(product_services, \"fish\")) %&gt;%\n  arrange(desc(n_fish))\n\n# A tibble: 27,622 × 6\n   id                          country type  revenue_omu product_services n_fish\n   &lt;chr&gt;                       &lt;chr&gt;   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;             &lt;int&gt;\n 1 Taylor LLC                  ZH      Comp…     138982. Fish (anchovy, …     11\n 2 Gvardeysk Sextant ОАО Cargo Uziland Comp…      73027. Fish salads (It…     11\n 3 Mclaughlin, Valdez and Moo… ZH      Comp…       6154. Fresh, cured, o…      8\n 4 Murphy, Fisher and Barnes   ZH      Comp…     256739. Frozen fish blo…      7\n 5 Garcia, Lloyd and Houston   ZH      Comp…      53509. Bottom fishes; …      7\n 6 SeaSelect Foods Salt spray  Marebak Comp…      41902. European whole …      7\n 7 Ancla del Este Sagl         Oceanus Comp…      16167. Bottom fishes, …      7\n 8 Monroe, Smith and Miller    ZH      Comp…     250255. Frozen processe…      6\n 9 Arunachal Pradesh s S.A. d… Marebak Comp…      60346. Offers a wide r…      6\n10 suō yú Ltd. Liability Co    Coralm… Comp…      31567. Offers a wide r…      6\n# ℹ 27,612 more rows\n\n\n\n\nTokenisation\nIn the code chunk, using unnest_token() from tidytext package to split text in product_services field into words.\n\ntoken_nodes &lt;- mc3_nodes %&gt;%\n  unnest_tokens(word, product_services)\n\nNow we can visualise the words extracted by using the code chunk below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\ntoken_nodes %&gt;%\n  count(word, sort = TRUE) %&gt;%\n  top_n(15) %&gt;%\n  mutate(word = reorder(word, n)) %&gt;%\n  ggplot(aes(x=word, y=n)) +\n  geom_col() +\n  xlab(NULL) +\n  coord_flip() +\n  labs(x=\"Count\", y = \"Unique words\", title = \"Count of unique words found in product_services field\")\n\n\n\n\nNoticint that the top 15 most frequent words contains a few stop words, e.g. “and” and “of”.\n\n\nRemoving stopwords\nWe will use the stop_words function from tidytext package to clean up stop words.\n\nstopwords_removed &lt;- token_nodes %&gt;%\n  anti_join(stop_words)\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe anti_join() from dplyr package is used to remove all stop words.\n\n\n\nThen we can visualise the words extracted using the code chunk below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nstopwords_removed %&gt;%\n  count(word, sort = TRUE) %&gt;%\n  top_n(15) %&gt;%\n  mutate(word = reorder(word, n)) %&gt;%\n  ggplot(aes(x=word, y=n)) +\n  geom_col() +\n  xlab(NULL) +\n  coord_flip() +\n  labs(x=\"Count\", y = \"Unique words\", title = \"Count of unique words found in product_services field\")"
  }
]